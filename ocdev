#!/bin/bash
# vim:set foldmethod=marker:
set -eu

export OCDEV_VARDIR=${OCDEV_VARDIR:-$HOME/.ocdev}
export OCDEV_ORIGIN_PACKAGE=${OCDEV_ORIGIN_PACKAGE:-github.com/openshift/origin}
export OCDEV_IMAGEREGISTRY_PACKAGE=${OCDEV_IMAGEREGISTRY_PACKAGE:-github.com/openshift/image-registry}

# {{{ usage

inspect_line() {
    sed -n 's/.*OCDEV '$1': \(.*\)/\1/p' "$2"
}

inspect_section() {
    perl <"$2" -ne '
        if (defined $prefix) {
            if (/^\Q$stripped_prefix\E\s*$/) {
                print "\n";
            } elsif (/^\Q$prefix\E(.*)$/) {
                $_ = $1;
                if (/^OCDEV /) { exit }
                print "$_\n";
            }
        }
        if (/^(.*)OCDEV '$1'(:|$)/) {
            $prefix=$1;
            $stripped_prefix=$1;
            $stripped_prefix =~ s/\s*$//;
        }
    '
}

commands() {
    for f in "$1"/*; do
        if [ -f "$f" ] && [ -x "$f" ]; then
            printf "%s\n" "${f##*/}"
        elif [ -d "$f" ]; then
            printf "%s\n" "${f##*/}"
        fi
    done
}

usage_commands() {
    local f name w=0
    for f in "$1"/*; do
        [ -f "$f" ] && [ -x "$f" ] || continue
        name=${f##*/}
        if [ ${#name} -gt $w ]; then
            w=${#name}
        fi
    done
    if [ $w != 0 ]; then
        printf "\nAvailable commands:\n"
    fi
    for f in "$1"/*; do
        [ -f "$f" ] && [ -x "$f" ] || continue
        name=${f##*/}
        printf "  %*s  %s\n" "-$w" "$name" "$(inspect_line HELP "$f")"
    done
}

usage_components() {
    local f name w=0
    for f in "$1"/*; do
        [ -d "$f" ] || continue
        name=${f##*/}
        if [ ${#name} -gt $w ]; then
            w=${#name}
        fi
    done
    if [ $w != 0 ]; then
        printf "\nCommands for components:\n"
    fi
    for f in "$1"/*; do
        [ -d "$f" ] || continue
        name=${f##*/}
        printf "  %*s  %s\n" "-$w" "$name" "$(test -e "$f/HELP" && inspect_line HELP "$f/HELP")"
    done
}

usage() {
    local is_dir= help_file usage
    if [ -d "$2" ]; then
        is_dir=1
        help_file="$2/HELP"
        test -e "$help_file" || help_file=
    else
        help_file="$2"
    fi

    [ -z "$help_file" ] || usage=$(inspect_line USAGE "$help_file")
    if [ -z "$usage" ] && [ -n "$is_dir" ]; then
        usage="<command>"
    fi

    echo "usage: $1${usage:+ }${usage}"
    [ -z "$help_file" ] || inspect_section HELP "$help_file"
    if [ -n "$is_dir" ]; then
        usage_commands "$2"
        usage_components "$2"
    fi
    [ -z "$help_file" ] || inspect_section MORE "$help_file"
}

# }}}

# {{{ unprefixed utils

warn() {
    printf "%s: %s\n" "$OCDEV_PROGNAME" "$*" >&2
}
export -f warn

fatal() {
    warn "$@"
    exit 1
}
export -f fatal

pkgdir() {
    local dir=$(go list -e -f '{{.Dir}}' "$1")
    if [ -z "$dir" ]; then
        return 1
    fi
    printf "%s\n" "$dir"
}
export -f pkgdir

cdpkg() {
    local dir
    if ! dir=$(pkgdir "$1"); then
        fatal "unable to find package $1"
    fi
    cd "$dir"
}
export -f cdpkg

ocdefault() {
    oc --context=$(oc config current-context | sed -e 's,^[^/]*,default,' -e 's,[^/]*$,system:admin,') "$@"
}
export -f ocdefault

oadm() {
    ocdefault adm "$@"
}
export -f oadm

# }}}

# {{{ ocdevutil

ocdevutil-remove-image() {
    if docker images -q "$1" | grep . >/dev/null; then
        docker rmi -f "$1"
    fi
}
export -f ocdevutil-remove-image

export OCDEV_BUILD_IMAGE_TMP=
export OCDEV_BUILD_IMAGE_PWD=
export OCDEV_BUILD_IMAGE_SAVE_TRAPS=
ocdevutil-build-image-cleanup() {
    eval "$OCDEV_BUILD_IMAGE_SAVE_TRAPS"
    cd "$OCDEV_BUILD_IMAGE_PWD"
    rm -rf "$OCDEV_BUILD_IMAGE_TMP"
    OCDEV_BUILD_IMAGE_TMP=
    [ $# -eq 0 ] || exit "$1"
}
export -f ocdevutil-build-image-cleanup

ocdevutil-build-image() {
    local generator=$1 name=$2; shift 2

    if [ -n "$OCDEV_BUILD_IMAGE_TMP" ]; then
        fatal "detected recursion in ocdevutil-build-image $2; prevoius tmp directory: $OCDEV_BUILD_IMAGE_TMP"
    fi

    OCDEV_BUILD_IMAGE_SAVE_TRAPS=$(trap)
    trap 'ocdevutil-build-image-cleanup $?' EXIT
    trap 'ocdevutil-build-image-cleanup 1' HUP PIPE INT QUIT TERM

    OCDEV_BUILD_IMAGE_PWD=$(pwd)
    OCDEV_BUILD_IMAGE_TMP=$(mktemp -d "${TMPDIR:-/tmp}"/$name.XXXXXXXX)
    cd "$OCDEV_BUILD_IMAGE_TMP"
    $generator
    docker build -t "$name" "$@" "$OCDEV_BUILD_IMAGE_TMP"
    ocdevutil-build-image-cleanup
}
export -f ocdevutil-build-image

# }}}

init() {
    local name pkg dir os arch
    os=$(go env GOHOSTOS)
    arch=$(go env GOHOSTARCH)
    export OCDEV_ORIG_PATH="$PATH"
    for name in ORIGIN IMAGEREGISTRY; do
        eval 'pkg="$OCDEV_'$name'_PACKAGE"'
        if dir=$(pkgdir "$pkg"); then
            eval 'export OCDEV_'$name'_TOPLEVEL=$dir'
            eval 'export OCDEV_'$name'_BINDIR=$dir/_output/local/bin/$os/$arch'
            eval 'export PATH="$OCDEV_'$name'_BINDIR:$PATH"'
        fi
    done
}

main() {
    [ -z "${OCDEV_TRACE-}" ] || set -x

    local progname="$1" snippets="$2"; shift 2

    [ $# -ge 1 ] || { usage "$progname" "$snippets" >&2; exit 1; }

    if [ -f "$snippets/$1" ] && [ -x "$snippets/$1" ]; then
        init
        export OCDEV_PROGNAME="$progname $1"
        "$snippets/$@"
        exit
    elif [ -d "$snippets/$1" ]; then
        progname="$progname $1"
        snippets="$snippets/$1"
        shift
        main "$progname" "$snippets" "$@"
        exit
    fi

    case "$1" in
    commands)
        if [ ! -d "$snippets" ]; then
            exit 0
        fi

        if [ $# -eq 1 ]; then
            echo "commands"
            echo "help"
            commands "$snippets"
        else
            progname="$progname $2"
            snippets="$snippets/$2"
            shift 2
            main "$progname" "$snippets" commands "$@"
        fi
        exit
        ;;
    help)
        if [ ! -f "$snippets" ] || [ ! -x "$snippets" ] && [ ! -d "$snippets" ]; then
            printf "%s: no such command\n" "$progname" >&2
            exit 1
        fi

        if [ $# -eq 1 ]; then
            usage "$progname" "$snippets"
        else
            progname="$progname $2"
            snippets="$snippets/$2"
            shift 2
            main "$progname" "$snippets" help "$@"
        fi
        exit
        ;;
    *)
        usage "$progname" "$snippets" >&2
        exit 1
    esac
}

main "$(basename "$0")" "$(dirname "$0")/snippets" "$@"
