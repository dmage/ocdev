#!/bin/bash -efu

usage() {
    echo "usage: $OCDEV_PROGNAME <command>"
    echo
    echo "Available commands:"
    echo "  build            Build openshift binary"
    echo "  docker-build     Cross-compile openshift binary for Docker"
    echo "  start            Start the all-in-one OpenShift server in the foreground"
    echo "  create-defaults  Create the user 'developer', the project 'myproject', and default imagestreams"
    echo "  destroy          Remove generated config files, etcd data, volumes, etc"
    echo "  anonymous-debug  Disable authorization for /debug/pprof endpoints"
    echo
    echo "OpenShift in Docker:"
    echo "  build-image      Build the openshift/origin:latest Docker image"
    echo "  up               Start the OpenShift server in Docker"
    echo "  down             Stop the OpenShift server in Docker"
    echo "  logs             Fetch the logs of OpenShift"
}

ocdevopenshift-build() {
    cdpkg "$OCDEV_ORIGIN_PACKAGE"
    ocdev build cmd/openshift
}

ocdevopenshift-docker-build() {
    cdpkg "$OCDEV_ORIGIN_PACKAGE"
    ocdev docker-build cmd/openshift
}

origin_image() {
    cp "$OCDEV_ORIGIN_DOCKER_BINDIR/openshift" ./openshift
    printf >./Dockerfile "%s\n" \
        'FROM openshift/origin:latest' \
        'COPY openshift /openshift/bin/openshift' \
        'RUN ln -sf /openshift/bin/openshift /usr/bin/openshift'
}

ocdevopenshift-build-image() {
    ocdevopenshift-docker-build
    ocdevutil-remove-image openshift/origin:latest
    ocdevutil-build-image origin_image openshift/origin:latest
}

ocdevopenshift-start() {
    local openshift
    if ! openshift=$(which openshift); then
        fatal "start: failed to find openshift binary"
    fi

    local configdir="$OCDEV_VARDIR/openshift.local.config"
    local etcddir="$OCDEV_VARDIR/openshift.local.etcd"
    local volumedir="$OCDEV_VARDIR/openshift.local.volumes"

    local hostname
    hostname=$(hostname)

    if [ ! -e "$configdir/master" -o ! -e "$configdir/node-$hostname" ]; then
        "$openshift" start --write-config="$configdir" \
            --images='openshift/origin-${component}:latest' \
            --etcd-dir="$etcddir" \
            --volume-dir="$volumedir"
        if [ ! -r "$configdir/master/admin.kubeconfig" ]; then
            sudo chmod +r "$configdir/master/admin.kubeconfig"
        fi
    fi
    cp "$configdir/master/admin.kubeconfig" "$HOME/.kube/config"

    sudo -E "$openshift" start \
        --master-config="$configdir/master/master-config.yaml" \
        --node-config="$configdir/node-$hostname/node-config.yaml" \
        "$@"
}

is_docker_for_mac() {
    ifconfig bridge100 >/dev/null 2>&1
}

ocdevopenshift-up() {
    ocdevutil-docker-init

    local is_docker_for_mac=
    if is_docker_for_mac; then is_docker_for_mac=1; fi

    local configdir="$OCDEV_VARDIR/in-docker/config"
    local etcddir="$OCDEV_VARDIR/in-docker/etcd"
    local volumedir="$OCDEV_VARDIR/in-docker/volumes"
    if [ -n "$is_docker_for_mac" ]; then
        etcddir="/ocdev/etcd"
        volumedir="/ocdev/volumes"
    fi

    [ -z "$(docker ps -aqf name='^/origin$')" ] || docker rm origin >/dev/null

    local hostname
    hostname=$(hostname)

    local public
    if [ ! -e "$configdir/master" -o ! -e "$configdir/node-$hostname" ]; then
        local publicip
        if [ -n "$is_docker_for_mac" ]; then
            publicip=$(docker run --rm --net=host busybox sh -c 'ip -o -4 addr show eth1 | awk -F"[ /]+" "{print\$4}"')
        else
            publicip=$(openshift start --print-ip)
        fi
        public="https://$publicip:8443"

        docker run --rm --net=host --hostname="$hostname" \
            -v "$configdir:$configdir" \
            -v "$etcddir:$etcddir" \
            -v "$volumedir:$volumedir" \
            -v "$OCDEV_ORIGIN_DOCKER_BINDIR:/openshift/bin" \
            openshift/origin start --write-config="$configdir" \
            --images='openshift/origin-${component}:latest' \
            --etcd-dir="$etcddir" \
            --volume-dir="$volumedir" \
            --public-master="$public"
        if [ ! -r "$configdir/master/admin.kubeconfig" ]; then
            sudo chmod +r "$configdir/master/admin.kubeconfig"
        fi
        if [ -n "$is_docker_for_mac" ]; then
            sed -i.bak -e "s,^\(current-context:\).*,\1 default/${publicip//./-}:8443/system:admin," "$configdir/master/admin.kubeconfig"
        fi
    else
        public=$(grep ^masterPublicURL: "$configdir/master/master-config.yaml" | sed -e 's/^[^:]*: *//')
    fi
    cp "$configdir/master/admin.kubeconfig" "$HOME/.kube/config"

    local dockeropts=""

    local cgroupdriver=$(docker info | sed -ne '/^Cgroup Driver:/ { s/^[^:]*: *//p; }')
    case "$cgroupdriver" in
    systemd)
        dockeropts="$dockeropts -v /var/run:/var/run:rw"
        dockeropts="$dockeropts -v /sys/fs/cgroup:/sys/fs/cgroup:rw"
    esac

    local dockerrootdir=$(docker info | sed -ne '/^Docker Root Dir:/ { s/^[^:]*: *//p; }')

    if [ -n "$is_docker_for_mac" ]; then
        docker run --rm --privileged --pid=host -v /:/rootfs busybox nsenter --mount=/rootfs/proc/1/ns/mnt -- mount --make-rshared /
    fi
    docker run -d --name=origin --privileged --net=host --hostname="$hostname" --pid=host \
        -v "$configdir:$configdir" \
        -v "$etcddir:$etcddir" \
        -v "$volumedir:$volumedir:rw,rslave" \
        -v "$OCDEV_ORIGIN_DOCKER_BINDIR:/openshift/bin" \
        -v "/:/rootfs:ro,slave" \
        -v "/var/run/docker.sock:/var/run/docker.sock" \
        -v "/var/lib/docker:/var/lib/docker:rw" \
        -v "/var/log/pods:/var/log/pods:rw" \
        -v "$dockerrootdir:$dockerrootdir:rw" \
        $dockeropts \
        openshift/origin start \
        --master-config="$configdir/master/master-config.yaml" \
        --node-config="$configdir/node-$hostname/node-config.yaml" \
        "$@"

    echo
    printf "%s\n" "$public"
    echo
}

ocdevopenshift-down() {
    docker kill origin
}

ocdevopenshift-logs() {
    docker logs origin "$@"
}

ocdevopenshift-create-defaults() {
    cdpkg "$OCDEV_ORIGIN_PACKAGE"
    oc login -u developer -p developer
    oc new-project myproject
    ocdefault -n openshift create -f ./examples/image-streams/image-streams-centos7.json
}

ocdevopenshift-anonymous-debug() {
    ocdefault adm policy add-cluster-role-to-user cluster-debugger system:anonymous
}

ocdevopenshift-destroy() {
    docker kill origin || true
    mount | grep -F "$OCDEV_VARDIR/openshift.local.volumes" | cut -d' ' -f3 | xargs -r sudo umount
    mount | grep -F "$OCDEV_VARDIR/in-docker/volumes" | cut -d' ' -f3 | xargs -r sudo umount
    if is_docker_for_mac; then
        docker run --rm -v /:/rootfs:rw busybox sh -c 'V=/rootfs/ocdev/volumes; rm -rf $V && mkdir -p $V'
    fi
    sudo rm -rf "$OCDEV_VARDIR"
}

ocdevutil-main ".ocdevopenshift-" "ocdevopenshift-" "$@"
